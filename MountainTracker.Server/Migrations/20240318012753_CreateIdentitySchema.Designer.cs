// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MountainTracker.Server.Contexts.MountainTrackerContext;

#nullable disable

namespace MountainTracker.Server.Migrations
{
    [DbContext(typeof(MountainTrackerDatabase1Context))]
    [Migration("20240318012753_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.ApplicationUserRoles");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("ApplicationUserRoles");
                });

            modelBuilder.Entity("GearToGearTypeLinks", b =>
                {
                    b.Property<byte>("ClimbingTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ClimbingTypeID");

                    b.Property<byte>("GearId")
                        .HasColumnType("tinyint")
                        .HasColumnName("GearID");

                    b.HasKey("ClimbingTypeId", "GearId")
                        .HasName("PK__GearToGe__9FD373F8BCE5121A");

                    b.HasIndex("GearId");

                    b.ToTable("GearToGearTypeLinks");
                });

            modelBuilder.Entity("MountainToRockClimbingWallLinks", b =>
                {
                    b.Property<int>("MountainId")
                        .HasColumnType("int")
                        .HasColumnName("MountainID");

                    b.Property<int>("ClimbingWallsId")
                        .HasColumnType("int")
                        .HasColumnName("ClimbingWallsID");

                    b.HasKey("MountainId", "ClimbingWallsId")
                        .HasName("PK__Mountain__CC24E42986BE9C60");

                    b.HasIndex("ClimbingWallsId");

                    b.ToTable("MountainToRockClimbingWallLinks");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationRoles");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("ApplicationUserClaims");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.ApplicationUserLogins");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("BannerPictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<byte?>("CountryId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("KeepPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("MetricOverImperial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("PasswordChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProfileURL");

                    b.Property<short?>("ProvinceId")
                        .HasColumnType("smallint");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex(new[] { "Email" }, "UQ_ApplicationUsers_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "UserName" }, "UQ_ApplicationUsers_UserName")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.AreaGeoFenceNodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AreaID");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3214EC27DDCE7825");

                    b.HasIndex("AreaId");

                    b.ToTable("AreaGeoFenceNodes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Areas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Info")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<double?>("LatitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<byte[]>("ThumbPictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("ZoneID");

                    b.HasKey("Id")
                        .HasName("PK__Areas__3214EC27E5BB9B61");

                    b.HasIndex(new[] { "ZoneId", "AreaCode" }, "UQ_Areas_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "ZoneId", "EnglishFullName" }, "UQ_Areas_Name")
                        .IsUnique();

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.BoulderingRoutes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("ClimbingWallId")
                        .HasColumnType("int")
                        .HasColumnName("ClimbingWallID");

                    b.HasKey("Id")
                        .HasName("PK__Boulderi__3214EC27A1742EE1");

                    b.HasIndex("ClimbingWallId");

                    b.ToTable("BoulderingRoutes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.BusyRatings", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.HasKey("Id")
                        .HasName("PK__BusyRati__3214EC2731592CD9");

                    b.ToTable("BusyRatings");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ClimbingQualityRatings", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.HasKey("Id")
                        .HasName("PK__Climbing__3214EC27D9E89DDA");

                    b.ToTable("ClimbingQualityRatings");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ClimbingTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Climbing__3214EC2755D4E87B");

                    b.ToTable("ClimbingTypes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Countries", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(44)
                        .IsUnicode(false)
                        .HasColumnType("varchar(44)");

                    b.HasKey("Id")
                        .HasName("PK__Countrie__3214EC2778A79FC4");

                    b.HasIndex(new[] { "CountryCode" }, "UQ_Countries_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "EnglishFullName" }, "UQ_Countries_Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.DistrictGeoFenceNodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__District__3214EC27B24DF21A");

                    b.HasIndex("DistrictId");

                    b.ToTable("DistrictGeoFenceNodes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Districts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Info")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<double?>("LatitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<byte[]>("ThumbPictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id")
                        .HasName("PK__District__3214EC274A3A1CB4");

                    b.HasIndex(new[] { "RegionId", "DistrictCode" }, "UQ_Districts_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "RegionId", "EnglishFullName" }, "UQ_Districts_Name")
                        .IsUnique();

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Gear", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Gear__3214EC2775AF251D");

                    b.ToTable("Gear");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GearSizes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte>("GearId")
                        .HasColumnType("tinyint")
                        .HasColumnName("GearID");

                    b.HasKey("Id")
                        .HasName("PK__GearSize__3214EC2702250B0C");

                    b.HasIndex("GearId");

                    b.ToTable("GearSizes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GroupMessagingGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupsName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__GroupMes__3214EC27DAB45892");

                    b.ToTable("GroupMessagingGroups");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GroupMessagingMembers", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupMessagingId")
                        .HasColumnType("int")
                        .HasColumnName("GroupMessagingID");

                    b.Property<bool>("AcceptedInvite")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeInvited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("TimeJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("TimeLastSeen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "GroupMessagingId")
                        .HasName("PK__GroupMes__3491EC20C2C70508");

                    b.HasIndex("GroupMessagingId");

                    b.ToTable("GroupMessagingMembers", t =>
                        {
                            t.HasTrigger("LeavingMessagingGroupTrigger");
                        });
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GroupMessagingMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupMessagingId")
                        .HasColumnType("int")
                        .HasColumnName("GroupMessagingID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__GroupMes__3214EC277423D4E3");

                    b.HasIndex("GroupMessagingId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMessagingMessages");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.IceClimbingRoutes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("ClimbingWallId")
                        .HasColumnType("int")
                        .HasColumnName("ClimbingWallID");

                    b.HasKey("Id")
                        .HasName("PK__IceClimb__3214EC27D52ECE00");

                    b.ToTable("IceClimbingRoutes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Mountains", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RouteInfo")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Mountain__3214EC27975947C7");

                    b.ToTable("Mountains");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ProvincesOrStates", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    b.Property<byte>("CountryId")
                        .HasColumnType("tinyint")
                        .HasColumnName("CountryID");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK__Province__3214EC27DA9A26BF");

                    b.HasIndex(new[] { "CountryId", "RegionCode" }, "UQ_ProvincesOrStates_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "CountryId", "EnglishFullName" }, "UQ_ProvincesOrStates_Name")
                        .IsUnique();

                    b.ToTable("ProvincesOrStates");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RegionGeoFenceNodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.HasKey("Id")
                        .HasName("PK__RegionGe__3214EC27C1E7ABCF");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionGeoFenceNodes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Info")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<double?>("LatitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<short>("ProvinceOrStateId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProvinceOrStateID");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("ThumbPictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id")
                        .HasName("PK__Regions__3214EC279286D96F");

                    b.HasIndex(new[] { "ProvinceOrStateId", "RegionCode" }, "UQ_Region_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "ProvinceOrStateId", "EnglishFullName" }, "UQ_Region_Name")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingDifficulties", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("EnglishCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id")
                        .HasName("PK__RockClim__3214EC277CEB81D5");

                    b.ToTable("RockClimbingDifficulties");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingRoutes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ClimbAnglesHaveOverHangs")
                        .HasColumnType("bit");

                    b.Property<bool>("ClimbAnglesHaveRoofs")
                        .HasColumnType("bit");

                    b.Property<bool>("ClimbAnglesHaveSlabs")
                        .HasColumnType("bit");

                    b.Property<bool>("ClimbAnglesHaveVerticals")
                        .HasColumnType("bit");

                    b.Property<int>("ClimbingWallId")
                        .HasColumnType("int")
                        .HasColumnName("ClimbingWallID");

                    b.Property<bool>("Crimpy")
                        .HasColumnType("bit");

                    b.Property<byte>("DifficultyId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DifficultyID");

                    b.Property<bool>("DriesFast")
                        .HasColumnType("bit");

                    b.Property<bool>("DryInRain")
                        .HasColumnType("bit");

                    b.Property<bool>("Dyno")
                        .HasColumnType("bit");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("FilteredSun")
                        .HasColumnType("bit");

                    b.Property<string>("FirstAscent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<string>("FirstFreeAscent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<double>("HeightInFeet")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("((3.28084)*[HeightInMeters])", false);

                    b.Property<double>("HeightInMeters")
                        .HasColumnType("float");

                    b.Property<string>("Info")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<byte>("NumberOfPitchs")
                        .HasColumnType("tinyint");

                    b.Property<bool>("PockSlashHole")
                        .HasColumnType("bit");

                    b.Property<bool>("Power")
                        .HasColumnType("bit");

                    b.Property<bool>("Pumpy")
                        .HasColumnType("bit");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Reachy")
                        .HasColumnType("bit");

                    b.Property<bool>("RockFalls")
                        .HasColumnType("bit");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<bool>("Runout")
                        .HasColumnType("bit");

                    b.Property<bool>("SeatStart")
                        .HasColumnType("bit");

                    b.Property<bool>("Seepage")
                        .HasColumnType("bit");

                    b.Property<bool>("Shady")
                        .HasColumnType("bit");

                    b.Property<bool>("Slopey")
                        .HasColumnType("bit");

                    b.Property<bool>("StickClip")
                        .HasColumnType("bit");

                    b.Property<bool>("SunAm")
                        .HasColumnType("bit")
                        .HasColumnName("SunAM");

                    b.Property<bool>("SunPm")
                        .HasColumnType("bit")
                        .HasColumnName("SunPM");

                    b.Property<bool>("Sunny")
                        .HasColumnType("bit");

                    b.Property<bool>("Techy")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ThumbPictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("TypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("TypeID");

                    b.Property<bool>("Windy")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__RockClim__3214EC276BCC0FD0");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "ClimbingWallId", "RouteCode" }, "UQ_RockClimbingRoutes_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "ClimbingWallId", "EnglishFullName" }, "UQ_RockClimbingRoutes_Name")
                        .IsUnique();

                    b.ToTable("RockClimbingRoutes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingRoutesToGearLinks", b =>
                {
                    b.Property<int>("RockClimbingRoutesId")
                        .HasColumnType("int")
                        .HasColumnName("RockClimbingRoutesID");

                    b.Property<byte>("GearSizeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("GearSizeID");

                    b.Property<short>("NumberRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RockClimbingRoutesId", "GearSizeId")
                        .HasName("PK__RockClim__C3324E3A162DD9B1");

                    b.HasIndex("GearSizeId");

                    b.ToTable("RockClimbingRoutesToGearLinks");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("ID");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id")
                        .HasName("PK__RockClim__3214EC270C61B79F");

                    b.ToTable("RockClimbingTypes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingWallGeoFenceNodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClimbingWallId")
                        .HasColumnType("int")
                        .HasColumnName("ClimbingWallID");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__RockClim__3214EC27FF46A267");

                    b.HasIndex("ClimbingWallId");

                    b.ToTable("RockClimbingWallGeoFenceNodes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingWalls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Approach")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<byte>("AprSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("AprSeasonalBusyRatingID");

                    b.Property<byte>("AprSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("AprSeasonalClimbingQualityRatingID");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AreaID");

                    b.Property<byte>("AugSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("AugSeasonalBusyRatingID");

                    b.Property<byte>("AugSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("AugSeasonalClimbingQualityRatingID");

                    b.Property<byte>("DecSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DecSeasonalBusyRatingID");

                    b.Property<byte>("DecSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DecSeasonalClimbingQualityRatingID");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte>("FebSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("FebSeasonalBusyRatingID");

                    b.Property<byte>("FebSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("FebSeasonalClimbingQualityRatingID");

                    b.Property<string>("Info")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<byte>("JanSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("JanSeasonalBusyRatingID");

                    b.Property<byte>("JanSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("JanSeasonalClimbingQualityRatingID");

                    b.Property<byte>("JulSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("JulSeasonalBusyRatingID");

                    b.Property<byte>("JulSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("JulSeasonalClimbingQualityRatingID");

                    b.Property<byte>("JunSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("JunSeasonalBusyRatingID");

                    b.Property<byte>("JunSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("JunSeasonalClimbingQualityRatingID");

                    b.Property<double?>("LatitudeParking")
                        .HasColumnType("float");

                    b.Property<double?>("LatitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeParking")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<byte>("MarSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("MarSeasonalBusyRatingID");

                    b.Property<byte>("MarSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("MarSeasonalClimbingQualityRatingID");

                    b.Property<byte>("MaySeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("MaySeasonalBusyRatingID");

                    b.Property<byte>("MaySeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("MaySeasonalClimbingQualityRatingID");

                    b.Property<byte>("NovSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NovSeasonalBusyRatingID");

                    b.Property<byte>("NovSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NovSeasonalClimbingQualityRatingID");

                    b.Property<byte>("OctSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("OctSeasonalBusyRatingID");

                    b.Property<byte>("OctSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("OctSeasonalClimbingQualityRatingID");

                    b.Property<byte>("SepSeasonalBusyRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SepSeasonalBusyRatingID");

                    b.Property<byte>("SepSeasonalClimbingQualityRatingId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SepSeasonalClimbingQualityRatingID");

                    b.Property<byte[]>("ThumbPictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("WallCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK__RockClim__3214EC27DA4C6A92");

                    b.HasIndex("AprSeasonalBusyRatingId");

                    b.HasIndex("AprSeasonalClimbingQualityRatingId");

                    b.HasIndex("AugSeasonalBusyRatingId");

                    b.HasIndex("AugSeasonalClimbingQualityRatingId");

                    b.HasIndex("DecSeasonalBusyRatingId");

                    b.HasIndex("DecSeasonalClimbingQualityRatingId");

                    b.HasIndex("FebSeasonalBusyRatingId");

                    b.HasIndex("FebSeasonalClimbingQualityRatingId");

                    b.HasIndex("JanSeasonalBusyRatingId");

                    b.HasIndex("JanSeasonalClimbingQualityRatingId");

                    b.HasIndex("JulSeasonalBusyRatingId");

                    b.HasIndex("JulSeasonalClimbingQualityRatingId");

                    b.HasIndex("JunSeasonalBusyRatingId");

                    b.HasIndex("JunSeasonalClimbingQualityRatingId");

                    b.HasIndex("MarSeasonalBusyRatingId");

                    b.HasIndex("MarSeasonalClimbingQualityRatingId");

                    b.HasIndex("MaySeasonalBusyRatingId");

                    b.HasIndex("MaySeasonalClimbingQualityRatingId");

                    b.HasIndex("NovSeasonalBusyRatingId");

                    b.HasIndex("NovSeasonalClimbingQualityRatingId");

                    b.HasIndex("OctSeasonalBusyRatingId");

                    b.HasIndex("OctSeasonalClimbingQualityRatingId");

                    b.HasIndex("SepSeasonalBusyRatingId");

                    b.HasIndex("SepSeasonalClimbingQualityRatingId");

                    b.HasIndex(new[] { "AreaId", "WallCode" }, "UQ_RockClimbingWalls_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "AreaId", "EnglishFullName" }, "UQ_RockClimbingWalls_Name")
                        .IsUnique();

                    b.ToTable("RockClimbingWalls");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UserDirectMessages", b =>
                {
                    b.Property<int>("DirectMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectMessageId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("DirectMessageId")
                        .HasName("PK__tmp_ms_x__8332D39CB9D02F06");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("UserDirectMessages");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UserFriends", b =>
                {
                    b.Property<int>("UserFromId")
                        .HasColumnType("int")
                        .HasColumnName("UserFromID");

                    b.Property<int>("UserToId")
                        .HasColumnType("int")
                        .HasColumnName("UserToID");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RequestAcceptDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RequestCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserFromId", "UserToId")
                        .HasName("PK__UserFrie__D4302545F0D07AC5");

                    b.HasIndex("UserToId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersAreaFavorites", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AreaID");

                    b.Property<string>("Notes")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.HasKey("UserId", "AreaId")
                        .HasName("PK__UsersAre__80834EAE76DAF971");

                    b.HasIndex("AreaId");

                    b.ToTable("UsersAreaFavorites");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbComments", b =>
                {
                    b.Property<byte>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CommentId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<int>("RockClimbingRoutesId")
                        .HasColumnType("int")
                        .HasColumnName("RockClimbingRoutesID");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__UsersRoc__C3B4DFAA253AD024");

                    b.HasIndex("RockClimbingRoutesId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRockClimbComments");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbRouteFavorites", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("RockClimbingRoutesId")
                        .HasColumnType("int")
                        .HasColumnName("RockClimbingRoutesID");

                    b.Property<string>("Notes")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.HasKey("UserId", "RockClimbingRoutesId")
                        .HasName("PK__UsersRoc__C5CBB65FA1853CBF");

                    b.HasIndex("RockClimbingRoutesId");

                    b.ToTable("UsersRockClimbRouteFavorites");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbingWallFavorites", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("RockClimbingWallId")
                        .HasColumnType("int")
                        .HasColumnName("RockClimbingWallID");

                    b.Property<string>("Notes")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.HasKey("UserId", "RockClimbingWallId")
                        .HasName("PK__UsersRoc__35FF1B6CC0138FFE");

                    b.HasIndex("RockClimbingWallId");

                    b.ToTable("UsersRockClimbingWallFavorites");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbs", b =>
                {
                    b.Property<byte>("ClimbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("ClimbID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ClimbId"));

                    b.Property<string>("Comments")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<int>("RockClimbingRoutesId")
                        .HasColumnType("int")
                        .HasColumnName("RockClimbingRoutesID");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ClimbId")
                        .HasName("PK__UsersRoc__2FC3D4C018D82566");

                    b.HasIndex("RockClimbingRoutesId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRockClimbs");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ZoneGeoFenceNodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("ZoneID");

                    b.HasKey("Id")
                        .HasName("PK__ZoneGeoF__3214EC27529D14D4");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneGeoFenceNodes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Zones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Info")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<double?>("LatitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeStartOrCenter")
                        .HasColumnType("float");

                    b.Property<byte[]>("ThumbPictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ZoneCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK__Zones__3214EC27831E47B8");

                    b.HasIndex(new[] { "DistrictId", "ZoneCode" }, "UQ_Zones_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "DistrictId", "EnglishFullName" }, "UQ_Zones_Name")
                        .IsUnique();

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationRolesIdentity", b =>
                {
                    b.HasBaseType("MountainTracker.Shared.Model.ApplicationRoles");

                    b.HasIndex(new[] { "Name" }, "RoleNameIndex")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ApplicationRolesIdentity");
                });

            modelBuilder.Entity("ApplicationUserRoles", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.ApplicationRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ApplicationUserRoles_dbo.ApplicationRoles_RoleId");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ApplicationUserRoles_dbo.ApplicationUsers_UserId");
                });

            modelBuilder.Entity("GearToGearTypeLinks", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.ClimbingTypes", null)
                        .WithMany()
                        .HasForeignKey("ClimbingTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GearToGearTypeLinks_ClimbingTypes");

                    b.HasOne("MountainTracker.Shared.Model.Gear", null)
                        .WithMany()
                        .HasForeignKey("GearId")
                        .IsRequired()
                        .HasConstraintName("FK_GearToGearTypeLinks_Gear");
                });

            modelBuilder.Entity("MountainToRockClimbingWallLinks", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingWalls", null)
                        .WithMany()
                        .HasForeignKey("ClimbingWallsId")
                        .IsRequired()
                        .HasConstraintName("FK_MountainToRockClimbingWallLinks_ClimbingWalls");

                    b.HasOne("MountainTracker.Shared.Model.Mountains", null)
                        .WithMany()
                        .HasForeignKey("MountainId")
                        .IsRequired()
                        .HasConstraintName("FK_MountainToRockClimbingWallLinks_Mountains");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationUserClaims", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationUserLogins", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("ApplicationUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ApplicationUserLogins_dbo.ApplicationUsers_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationUsers", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Countries", "Country")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_ApplicationUsers_Countries");

                    b.HasOne("MountainTracker.Shared.Model.ProvincesOrStates", "Province")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_ApplicationUsers_ProvincesOrStates");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.AreaGeoFenceNodes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Areas", "Area")
                        .WithMany("AreaGeoFenceNodes")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FK_AreaGeoFenceNodes_Areas");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Areas", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Zones", "Zone")
                        .WithMany("Areas")
                        .HasForeignKey("ZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_Areas_Zones");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.BoulderingRoutes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingWalls", "ClimbingWall")
                        .WithMany("BoulderingRoutes")
                        .HasForeignKey("ClimbingWallId")
                        .IsRequired()
                        .HasConstraintName("FK_BoulderingRoutes_ClimbingWalls");

                    b.Navigation("ClimbingWall");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.DistrictGeoFenceNodes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Districts", "District")
                        .WithMany("DistrictGeoFenceNodes")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_DistrictGeoFenceNodes_District");

                    b.Navigation("District");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Districts", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Regions", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK_Districts_Regions");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GearSizes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Gear", "Gear")
                        .WithMany("GearSizes")
                        .HasForeignKey("GearId")
                        .IsRequired()
                        .HasConstraintName("FK_GearSizes_RockClimbingGearID");

                    b.Navigation("Gear");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GroupMessagingMembers", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.GroupMessagingGroups", "GroupMessaging")
                        .WithMany("GroupMessagingMembers")
                        .HasForeignKey("GroupMessagingId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMessagingMembers_GroupMessaging");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("GroupMessagingMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMessagingMembers_Users");

                    b.Navigation("GroupMessaging");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GroupMessagingMessages", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.GroupMessagingGroups", "GroupMessaging")
                        .WithMany("GroupMessagingMessages")
                        .HasForeignKey("GroupMessagingId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMessagingMessages_GroupMessagingGroups");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("GroupMessagingMessages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMessagingMessages_Users");

                    b.Navigation("GroupMessaging");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ProvincesOrStates", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Countries", "Country")
                        .WithMany("ProvincesOrStates")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_ProvincesOrStates_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RegionGeoFenceNodes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Regions", "Region")
                        .WithMany("RegionGeoFenceNodes")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK_RegionGeoFenceNodes_Regions");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Regions", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.ProvincesOrStates", "ProvinceOrState")
                        .WithMany("Regions")
                        .HasForeignKey("ProvinceOrStateId")
                        .IsRequired()
                        .HasConstraintName("FK_Regions_ProvincesOrStates");

                    b.Navigation("ProvinceOrState");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingRoutes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingWalls", "ClimbingWall")
                        .WithMany("RockClimbingRoutes")
                        .HasForeignKey("ClimbingWallId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingRoutes_RockClimbingWalls");

                    b.HasOne("MountainTracker.Shared.Model.RockClimbingDifficulties", "Difficulty")
                        .WithMany("RockClimbingRoutes")
                        .HasForeignKey("DifficultyId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingRoutes_RockClimbingDifficulties");

                    b.HasOne("MountainTracker.Shared.Model.RockClimbingTypes", "Type")
                        .WithMany("RockClimbingRoutes")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingRoutes_RockWallClimbingTypes");

                    b.Navigation("ClimbingWall");

                    b.Navigation("Difficulty");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingRoutesToGearLinks", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.GearSizes", "GearSize")
                        .WithMany("RockClimbingRoutesToGearLinks")
                        .HasForeignKey("GearSizeId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingRoutesGearLinkingTable_GearSizeID");

                    b.HasOne("MountainTracker.Shared.Model.RockClimbingRoutes", "RockClimbingRoutes")
                        .WithMany("RockClimbingRoutesToGearLinks")
                        .HasForeignKey("RockClimbingRoutesId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingRoutesGearLinkingTable_RockClimbingRoutes");

                    b.Navigation("GearSize");

                    b.Navigation("RockClimbingRoutes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingWallGeoFenceNodes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingWalls", "ClimbingWall")
                        .WithMany("RockClimbingWallGeoFenceNodes")
                        .HasForeignKey("ClimbingWallId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWallGeoFenceNodes_RockClimbingWalls");

                    b.Navigation("ClimbingWall");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingWalls", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "AprSeasonalBusyRating")
                        .WithMany("RockClimbingWallsAprSeasonalBusyRating")
                        .HasForeignKey("AprSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Apr");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "AprSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsAprSeasonalClimbingQualityRating")
                        .HasForeignKey("AprSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Apr");

                    b.HasOne("MountainTracker.Shared.Model.Areas", "Area")
                        .WithMany("RockClimbingWalls")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_Areas");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "AugSeasonalBusyRating")
                        .WithMany("RockClimbingWallsAugSeasonalBusyRating")
                        .HasForeignKey("AugSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Aug");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "AugSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsAugSeasonalClimbingQualityRating")
                        .HasForeignKey("AugSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Aug");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "DecSeasonalBusyRating")
                        .WithMany("RockClimbingWallsDecSeasonalBusyRating")
                        .HasForeignKey("DecSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Dec");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "DecSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsDecSeasonalClimbingQualityRating")
                        .HasForeignKey("DecSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Dec");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "FebSeasonalBusyRating")
                        .WithMany("RockClimbingWallsFebSeasonalBusyRating")
                        .HasForeignKey("FebSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Feb");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "FebSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsFebSeasonalClimbingQualityRating")
                        .HasForeignKey("FebSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Feb");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "JanSeasonalBusyRating")
                        .WithMany("RockClimbingWallsJanSeasonalBusyRating")
                        .HasForeignKey("JanSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Jan");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "JanSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsJanSeasonalClimbingQualityRating")
                        .HasForeignKey("JanSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Jan");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "JulSeasonalBusyRating")
                        .WithMany("RockClimbingWallsJulSeasonalBusyRating")
                        .HasForeignKey("JulSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Jul");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "JulSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsJulSeasonalClimbingQualityRating")
                        .HasForeignKey("JulSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Jul");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "JunSeasonalBusyRating")
                        .WithMany("RockClimbingWallsJunSeasonalBusyRating")
                        .HasForeignKey("JunSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Jun");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "JunSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsJunSeasonalClimbingQualityRating")
                        .HasForeignKey("JunSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Jun");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "MarSeasonalBusyRating")
                        .WithMany("RockClimbingWallsMarSeasonalBusyRating")
                        .HasForeignKey("MarSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Mar");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "MarSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsMarSeasonalClimbingQualityRating")
                        .HasForeignKey("MarSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Mar");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "MaySeasonalBusyRating")
                        .WithMany("RockClimbingWallsMaySeasonalBusyRating")
                        .HasForeignKey("MaySeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_May");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "MaySeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsMaySeasonalClimbingQualityRating")
                        .HasForeignKey("MaySeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_May");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "NovSeasonalBusyRating")
                        .WithMany("RockClimbingWallsNovSeasonalBusyRating")
                        .HasForeignKey("NovSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Nov");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "NovSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsNovSeasonalClimbingQualityRating")
                        .HasForeignKey("NovSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Nov");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "OctSeasonalBusyRating")
                        .WithMany("RockClimbingWallsOctSeasonalBusyRating")
                        .HasForeignKey("OctSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Oct");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "OctSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsOctSeasonalClimbingQualityRating")
                        .HasForeignKey("OctSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Oct");

                    b.HasOne("MountainTracker.Shared.Model.BusyRatings", "SepSeasonalBusyRating")
                        .WithMany("RockClimbingWallsSepSeasonalBusyRating")
                        .HasForeignKey("SepSeasonalBusyRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_BusyRatings_Sep");

                    b.HasOne("MountainTracker.Shared.Model.ClimbingQualityRatings", "SepSeasonalClimbingQualityRating")
                        .WithMany("RockClimbingWallsSepSeasonalClimbingQualityRating")
                        .HasForeignKey("SepSeasonalClimbingQualityRatingId")
                        .IsRequired()
                        .HasConstraintName("FK_RockClimbingWalls_ClimbingQualityRatings_Sep");

                    b.Navigation("AprSeasonalBusyRating");

                    b.Navigation("AprSeasonalClimbingQualityRating");

                    b.Navigation("Area");

                    b.Navigation("AugSeasonalBusyRating");

                    b.Navigation("AugSeasonalClimbingQualityRating");

                    b.Navigation("DecSeasonalBusyRating");

                    b.Navigation("DecSeasonalClimbingQualityRating");

                    b.Navigation("FebSeasonalBusyRating");

                    b.Navigation("FebSeasonalClimbingQualityRating");

                    b.Navigation("JanSeasonalBusyRating");

                    b.Navigation("JanSeasonalClimbingQualityRating");

                    b.Navigation("JulSeasonalBusyRating");

                    b.Navigation("JulSeasonalClimbingQualityRating");

                    b.Navigation("JunSeasonalBusyRating");

                    b.Navigation("JunSeasonalClimbingQualityRating");

                    b.Navigation("MarSeasonalBusyRating");

                    b.Navigation("MarSeasonalClimbingQualityRating");

                    b.Navigation("MaySeasonalBusyRating");

                    b.Navigation("MaySeasonalClimbingQualityRating");

                    b.Navigation("NovSeasonalBusyRating");

                    b.Navigation("NovSeasonalClimbingQualityRating");

                    b.Navigation("OctSeasonalBusyRating");

                    b.Navigation("OctSeasonalClimbingQualityRating");

                    b.Navigation("SepSeasonalBusyRating");

                    b.Navigation("SepSeasonalClimbingQualityRating");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UserDirectMessages", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "UserFrom")
                        .WithMany("UserDirectMessagesUserFrom")
                        .HasForeignKey("UserFromId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDirectMessages_Users_From");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "UserTo")
                        .WithMany("UserDirectMessagesUserTo")
                        .HasForeignKey("UserToId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDirectMessages_Users_To");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UserFriends", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "UserFrom")
                        .WithMany("UserFriendsUserFrom")
                        .HasForeignKey("UserFromId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFriends_Users_From");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "UserTo")
                        .WithMany("UserFriendsUserTo")
                        .HasForeignKey("UserToId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFriends_Users_To");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersAreaFavorites", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Areas", "Area")
                        .WithMany("UsersAreaFavorites")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersAreaFavorites_Areas");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("UsersAreaFavorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersAreaFavorites_Users");

                    b.Navigation("Area");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbComments", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingRoutes", "RockClimbingRoutes")
                        .WithMany("UsersRockClimbComments")
                        .HasForeignKey("RockClimbingRoutesId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersRockClimbComments_RockClimbingRoutes");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("UsersRockClimbComments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersRockClimbComments_Users");

                    b.Navigation("RockClimbingRoutes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbRouteFavorites", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingRoutes", "RockClimbingRoutes")
                        .WithMany("UsersRockClimbRouteFavorites")
                        .HasForeignKey("RockClimbingRoutesId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersRockClimbRouteFavorites_RockClimbingRoutes");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("UsersRockClimbRouteFavorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersRockClimbRouteFavorites_ApplicationUsers");

                    b.Navigation("RockClimbingRoutes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbingWallFavorites", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingWalls", "RockClimbingWall")
                        .WithMany("UsersRockClimbingWallFavorites")
                        .HasForeignKey("RockClimbingWallId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersWallFavorites_ClimbingWalls");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("UsersRockClimbingWallFavorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersWallFavorites_Users");

                    b.Navigation("RockClimbingWall");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.UsersRockClimbs", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.RockClimbingRoutes", "RockClimbingRoutes")
                        .WithMany("UsersRockClimbs")
                        .HasForeignKey("RockClimbingRoutesId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersRockClimbTracker_RockClimbingRoutes");

                    b.HasOne("MountainTracker.Shared.Model.ApplicationUsers", "User")
                        .WithMany("UsersRockClimbs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersRockClimbTracker_Users");

                    b.Navigation("RockClimbingRoutes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ZoneGeoFenceNodes", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Zones", "Zone")
                        .WithMany("ZoneGeoFenceNodes")
                        .HasForeignKey("ZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_ZoneGeoFenceNodes_Zones");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Zones", b =>
                {
                    b.HasOne("MountainTracker.Shared.Model.Districts", "District")
                        .WithMany("Zones")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_Zones_Districts");

                    b.Navigation("District");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ApplicationUsers", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserLogins");

                    b.Navigation("GroupMessagingMembers");

                    b.Navigation("GroupMessagingMessages");

                    b.Navigation("UserDirectMessagesUserFrom");

                    b.Navigation("UserDirectMessagesUserTo");

                    b.Navigation("UserFriendsUserFrom");

                    b.Navigation("UserFriendsUserTo");

                    b.Navigation("UsersAreaFavorites");

                    b.Navigation("UsersRockClimbComments");

                    b.Navigation("UsersRockClimbRouteFavorites");

                    b.Navigation("UsersRockClimbingWallFavorites");

                    b.Navigation("UsersRockClimbs");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Areas", b =>
                {
                    b.Navigation("AreaGeoFenceNodes");

                    b.Navigation("RockClimbingWalls");

                    b.Navigation("UsersAreaFavorites");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.BusyRatings", b =>
                {
                    b.Navigation("RockClimbingWallsAprSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsAugSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsDecSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsFebSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsJanSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsJulSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsJunSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsMarSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsMaySeasonalBusyRating");

                    b.Navigation("RockClimbingWallsNovSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsOctSeasonalBusyRating");

                    b.Navigation("RockClimbingWallsSepSeasonalBusyRating");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ClimbingQualityRatings", b =>
                {
                    b.Navigation("RockClimbingWallsAprSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsAugSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsDecSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsFebSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsJanSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsJulSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsJunSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsMarSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsMaySeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsNovSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsOctSeasonalClimbingQualityRating");

                    b.Navigation("RockClimbingWallsSepSeasonalClimbingQualityRating");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Countries", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("ProvincesOrStates");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Districts", b =>
                {
                    b.Navigation("DistrictGeoFenceNodes");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Gear", b =>
                {
                    b.Navigation("GearSizes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GearSizes", b =>
                {
                    b.Navigation("RockClimbingRoutesToGearLinks");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.GroupMessagingGroups", b =>
                {
                    b.Navigation("GroupMessagingMembers");

                    b.Navigation("GroupMessagingMessages");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.ProvincesOrStates", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Regions", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("RegionGeoFenceNodes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingDifficulties", b =>
                {
                    b.Navigation("RockClimbingRoutes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingRoutes", b =>
                {
                    b.Navigation("RockClimbingRoutesToGearLinks");

                    b.Navigation("UsersRockClimbComments");

                    b.Navigation("UsersRockClimbRouteFavorites");

                    b.Navigation("UsersRockClimbs");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingTypes", b =>
                {
                    b.Navigation("RockClimbingRoutes");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.RockClimbingWalls", b =>
                {
                    b.Navigation("BoulderingRoutes");

                    b.Navigation("RockClimbingRoutes");

                    b.Navigation("RockClimbingWallGeoFenceNodes");

                    b.Navigation("UsersRockClimbingWallFavorites");
                });

            modelBuilder.Entity("MountainTracker.Shared.Model.Zones", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("ZoneGeoFenceNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
